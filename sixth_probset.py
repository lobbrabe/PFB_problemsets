#!/usr/bin/env python3
#mlr 20221013

#This is the sixth probelm set: Sets and IO 

mySet = set('ATGTGGG')
mySet2 = {'ATGCCT'}

print(f"The intersection of these sets is: {mySet&mySet2}")
print(f"The difference of mySet-mySet2 is: {mySet-mySet2}")
print(f"The union of these sets is: {mySet|mySet2}")
print(f"The symmetric difference of these sets is: {mySet^mySet2}")

SetA = set((3, 14, 15, 26, 5, 35, 9))
SetB = set((60, 22, 14, 0, 9))

print(f"The intersection of these sets is: {SetA&SetB}")
print(f"The difference of SetA-SetB is: {SetA-SetB}")
print(f"The union of these sets is: {SetA|SetB}")
print(f"The symmetric difference of these sets is: {SetA^SetB}")

seq_set = set('GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCGTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGAC')
print(seq_set)


#Part2: Determining the unique characters in the seq
dna = 'GAACTCCAAAAATGAAAACATAGTAGCAATCAAAGCATCCCACTATTTTTTGTCTCTCGTTTCATTAGCGTTGTAAATTACTGATACCCTACTATACCTCTACAAGGCCTTTGTCATCTTTTTACTCAAGTGTGAAATCATCACTTATTGTATGAAGGATGAGCTTTCCGTTCGCTAGTTTGCTGAAAAGGCCTTCTGCAATAAGCTCTCTATTATCTTTAAAAAAACCTGGTTCCTGGTCTTCCATTCTGCTAAAAGCTGTAGGGGTTTTATCACGAGATTCCCGTTGGCATTCTGACTTATTAAAAATGCTTACAGAAGAAATGGATTCTTTAAATGGTCAAATTAATACGTGGACAGATAATAATCCTTTATTAGATGAAATTACGAAGCCATACAGAAAATCTTCAACTCGTTTTTTTCATCCGCTTCTTGTACTTCTAATGTCTAGAGCATCAGTAAATGGGGATCCACCGAGTCAGCAACTATTTCAAAGGTACAAACAACTTGCCCGTGTAACAGAATTGATTCATGCTGCCAATATAATTCATATTAATATTGGAGAAGAACAAAGCAACGAACAGATTAAACTTGCAACGTTGGTTGGAGATTATTTACTCGGAAAGGCGTCTGTTGATTTAGCACATTTAGAAAACAACGCTATTACAGAAATTATGGCTTCTGTTATTGCAAACTTAGTTGAAGGGCACTTCGGAAGCCGACAAAATGGCTCTGTTGGTTTGTCAAACGAACGAACCATCCTTCTGCAATCAGCCTTTATGCCAGCAAAGGCATGTTTATGCGCAAGCATATTGAATAACTCATCACAATACATTAATGATGCGTGTTTCAATTATGGAAAATTTCTAGGCTTATCGCTGCAACTGGCCCATAAGCCTGTATCTCCTGACGCCCAAGTTTTGCAAAAGAATAATGACATTTTGAAAACATATGTTGAGAATGCCAAGAGCTCATTGTCTGTTTTCCCCGATATAGAGGCTAAGCAAGCTCTCATGGAAATCGCTAATAGTGTTTCGAAGTAATCGACAGGTATTGTATCCTGGATTAATATTAGGGTGGCTCATGCATGCTCGTGCAATCGTAACAAATATGTCTTTCTTTTACGAATTTTAACGCTTCAATATAAATCATATTTTTCCTCA'

seq_set1 = set(dna)
nt_count = {} 
for nt in seq_set1: 
  count = dna.count(nt) 
  nt_count[nt] = count
print('nt count: ', nt_count) 

GC_count = int(nt_count['G']) + int(nt_count['C']) 
AT_count = int(nt_count['A']) + int(nt_count['T']) 
print(f"The GC content is : {(GC_count / (GC_count + AT_count))* 100}% ")


#Part6: opening and reading files
with open("Python_06.fastq.txt", "r") as fastq_file: 

  line_count = 0
  line_len = []
  total_char = []
  for line in fastq_file: 
    line = line.rstrip()
    line_count += 1
    line_len.append(len(line))
  print(f"Line count : {line_count}") 
  print(f"Acerage line length : {sum(line_len)/line_count}")

#Part3: opening and editing a file
 
with open('Python_06.txt', 'r') as raw, open('Python_06_uc.txt', 'w') as outfile: 
	for line in raw:
		line = line.rstrip()
		line_upper = line.upper()
		outfile.write(line_upper + '\n') 
print('Finished wrirint Python_06_uc.txt')


#Part4: Reverse compliment of a text file  

import re
genes = {}
with open ('Python_06.seq.txt', 'r') as raw: 
	for line in raw: 
		line = line.rstrip()
		gene_id, seq = line.split()
		genes[gene_id] = seq
print(genes) 

rc_genes = {}
for gene_id, seq in genes.items(): 
	progress_gene = seq.replace('T','a')
	progress_gene1 = progress_gene.replace('A','t')
	progress_gene2 = progress_gene1.replace('C','g')
	progress_gene3 = progress_gene2.replace('G','c')
	rc_gene = progress_gene3[::-1]
	rc_gene = rc_gene.upper()
	rc_genes[gene_id] = rc_gene 
print(rc_genes) 
	


	
